import React, { useState, useEffect, useRef } from 'react';
import { 
  AlertTriangle, 
  MapPin, 
  Navigation, 
  Phone, 
  Settings, 
  Bell,
  Waves,
  Wind,
  Thermometer,
  Activity,
  Users,
  Shield,
  Camera,
  Mic,
  Send,
  Globe,
  Clock,
  Target,
  Battery,
  Wifi,
  Satellite,
  Zap,
  Eye,
  Heart,
  Star,
  TrendingUp,
  Calendar,
  Award,
  MessageCircle,
  Share2,
  Download,
  Upload,
  RefreshCw,
  Filter,
  Search,
  ChevronDown,
  ChevronRight,
  User,
  Home,
  Bookmark,
  Plus,
  X,
  Check,
  AlertCircle,
  Info,
  Radio,
  Anchor
} from 'lucide-react';

const CoastalSentinelApp = () => {
  const [currentScreen, setCurrentScreen] = useState('dashboard');
  const [user, setUser] = useState({ name: 'Vidhi', points: 1250, level: 'Ocean Guardian' });
  const [userLocation, setUserLocation] = useState({ 
    lat: 22.3072, 
    lng: 70.8022,
    accuracy: 'High',
    lastUpdate: new Date()
  });
  const [isOnline, setIsOnline] = useState(true);
  const [batteryLevel, setBatteryLevel] = useState(85);
  
  const [alerts, setAlerts] = useState([
    {
      id: 1,
      type: 'cyclone',
      severity: 'critical',
      title: 'Severe Cyclonic Storm "Biparjoy"',
      description: 'Category 3 cyclone with sustained winds of 120 km/h approaching Kutch coast',
      eta: '4 hours 30 minutes',
      distance: '32 km NW',
      confidence: 94,
      affectedPopulation: '2.3M',
      evacuationZones: ['Zone A (0-2km)', 'Zone B (2-5km)', 'Zone C (5-10km)'],
      emergencyContacts: ['108 - Disaster Response', '1070 - Cyclone Warning'],
      timestamp: new Date(Date.now() - 30 * 60 * 1000),
      source: 'IMD Gandhinagar',
      aiPrediction: true
    },
    {
      id: 2,
      type: 'tsunami',
      severity: 'high',
      title: 'Tsunami Advisory',
      description: 'Minor tsunami waves (0.5-1m) possible due to seismic activity',
      eta: '45 minutes',
      distance: '180 km SW',
      confidence: 78,
      affectedPopulation: '850K',
      evacuationZones: ['Coastal Zone (0-500m)'],
      timestamp: new Date(Date.now() - 15 * 60 * 1000),
      source: 'INCOIS Hyderabad',
      aiPrediction: false
    }
  ]);

  const [environmentalData, setEnvironmentalData] = useState({
    seaLevel: { value: 2.34, trend: '+0.12', unit: 'm', status: 'rising' },
    windSpeed: { value: 68, trend: '+15', unit: 'km/h', status: 'increasing' },
    temperature: { value: 31.2, trend: '+2.1', unit: '°C', status: 'rising' },
    humidity: { value: 87, trend: '+8', unit: '%', status: 'high' },
    pressure: { value: 996.2, trend: '-4.8', unit: 'hPa', status: 'dropping' },
    waveHeight: { value: 3.8, trend: '+1.2', unit: 'm', status: 'rough' },
    waterQuality: { value: 'Poor', trend: 'declining', unit: 'AQI 165', status: 'unhealthy' },
    visibility: { value: 2.1, trend: '-1.3', unit: 'km', status: 'poor' }
  });

  const [notifications, setNotifications] = useState([
    {
      id: 1,
      title: 'AI Prediction Alert',
      message: 'Storm surge height increased by 15% based on latest satellite data',
      time: '2 min ago',
      type: 'ai',
      read: false
    },
    {
      id: 2,
      title: 'Community Report',
      message: 'Strong winds reported by 47 users in your area',
      time: '8 min ago',
      type: 'community',
      read: false
    }
  ]);

  const [gamification, setGamification] = useState({
    todayReports: 3,
    weeklyGoal: 10,
    badges: ['First Reporter', 'Weather Watcher', 'Community Hero'],
    streak: 7,
    leaderboardRank: 23
  });

  // Simulate real-time updates
  useEffect(() => {
    const interval = setInterval(() => {
      // Update environmental data with realistic variations
      setEnvironmentalData(prev => ({
        ...prev,
        windSpeed: { 
          ...prev.windSpeed, 
          value: Math.max(0, prev.windSpeed.value + (Math.random() - 0.5) * 5),
          trend: Math.random() > 0.5 ? '+' + Math.floor(Math.random() * 10) : '-' + Math.floor(Math.random() * 5)
        },
        seaLevel: {
          ...prev.seaLevel,
          value: Math.max(0, prev.seaLevel.value + (Math.random() - 0.5) * 0.1),
          trend: Math.random() > 0.3 ? '+0.' + Math.floor(Math.random() * 20) : '-0.' + Math.floor(Math.random() * 10)
        }
      }));

      // Simulate location accuracy changes
      setUserLocation(prev => ({
        ...prev,
        accuracy: Math.random() > 0.8 ? 'Medium' : 'High',
        lastUpdate: new Date()
      }));

      // Battery simulation
      setBatteryLevel(prev => Math.max(10, prev - Math.floor(Math.random() * 2)));
    }, 8000);
    
    return () => clearInterval(interval);
  }, []);

  const getSeverityColor = (severity) => {
    switch (severity) {
      case 'critical': return 'from-red-600 to-red-800';
      case 'high': return 'from-orange-500 to-red-500';
      case 'medium': return 'from-yellow-500 to-orange-500';
      case 'low': return 'from-green-500 to-yellow-500';
      default: return 'from-gray-500 to-gray-700';
    }
  };

  const getAlertIcon = (type) => {
    switch (type) {
      case 'cyclone': return <Wind className="w-6 h-6" />;
      case 'tsunami': return <Waves className="w-6 h-6" />;
      case 'flood': return <Waves className="w-6 h-6" />;
      case 'pollution': return <AlertTriangle className="w-6 h-6" />;
      default: return <Shield className="w-6 h-6" />;
    }
  };

  const StatusBar = () => (
    <div className="flex items-center justify-between text-xs text-white bg-black bg-opacity-20 px-4 py-1">
      <div className="flex items-center space-x-2">
        <span>9:41</span>
        <div className="flex items-center space-x-1">
          {isOnline ? (
            <Wifi className="w-3 h-3" />
          ) : (
            <div className="w-3 h-3 bg-red-500 rounded-full animate-pulse" />
          )}
          <Satellite className="w-3 h-3" />
          <span className="text-green-400">GPS</span>
        </div>
      </div>
      <div className="flex items-center space-x-2">
        <Battery className={`w-4 h-4 ${batteryLevel < 20 ? 'text-red-400' : 'text-green-400'}`} />
        <span>{batteryLevel}%</span>
      </div>
    </div>
  );

  const DashboardScreen = () => (
    <div className="p-4 space-y-4">
      {/* Welcome Section with Gamification */}
      <div className="bg-gradient-to-br from-purple-600 via-blue-600 to-cyan-500 text-white rounded-2xl p-6 relative overflow-hidden">
        <div className="absolute top-0 right-0 w-32 h-32 bg-white bg-opacity-10 rounded-full -translate-y-16 translate-x-16"></div>
        <div className="absolute bottom-0 left-0 w-24 h-24 bg-white bg-opacity-10 rounded-full translate-y-12 -translate-x-12"></div>
        
        <div className="relative z-10">
          <div className="flex items-center justify-between mb-4">
            <div>
              <h2 className="text-2xl font-bold">Welcome back, {user.name}! 👋</h2>
              <p className="opacity-90">{user.level} • {user.points} Points</p>
            </div>
            <div className="text-center">
              <div className="w-16 h-16 bg-white bg-opacity-20 rounded-full flex items-center justify-center mb-2">
                <Award className="w-8 h-8 text-yellow-300" />
              </div>
              <span className="text-xs">Rank #{gamification.leaderboardRank}</span>
            </div>
          </div>
          
          <div className="grid grid-cols-3 gap-4 mt-4">
            <div className="text-center">
              <div className="text-2xl font-bold">{gamification.todayReports}</div>
              <div className="text-xs opacity-80">Reports Today</div>
            </div>
            <div className="text-center">
              <div className="text-2xl font-bold">{gamification.streak}</div>
              <div className="text-xs opacity-80">Day Streak</div>
            </div>
            <div className="text-center">
              <div className="text-2xl font-bold">{gamification.badges.length}</div>
              <div className="text-xs opacity-80">Badges Earned</div>
            </div>
          </div>
        </div>
      </div>

      {/* Critical Alerts */}
      <div className="space-y-3">
        <div className="flex items-center justify-between">
          <h3 className="text-lg font-bold flex items-center">
            <Zap className="w-5 h-5 mr-2 text-red-500" />
            Active Threats
          </h3>
          <button className="bg-red-500 text-white px-3 py-1 rounded-full text-sm animate-pulse">
            LIVE
          </button>
        </div>

        {alerts.map(alert => (
          <div key={alert.id} className={`bg-gradient-to-r ${getSeverityColor(alert.severity)} text-white rounded-2xl p-5 shadow-lg`}>
            <div className="flex items-start justify-between mb-3">
              <div className="flex items-center space-x-3">
                <div className="bg-white bg-opacity-20 p-2 rounded-full">
                  {getAlertIcon(alert.type)}
                </div>
                <div>
                  <h4 className="font-bold text-lg">{alert.title}</h4>
                  <div className="flex items-center space-x-2 text-sm opacity-90">
                    <span>{alert.source}</span>
                    {alert.aiPrediction && (
                      <span className="bg-white bg-opacity-20 px-2 py-1 rounded-full text-xs">
                        AI Enhanced
                      </span>
                    )}
                  </div>
                </div>
              </div>
              <div className="text-right text-sm">
                <div className="font-bold">{alert.confidence}%</div>
                <div className="opacity-80">Confidence</div>
              </div>
            </div>

            <p className="text-sm opacity-95 mb-4">{alert.description}</p>
            
            <div className="grid grid-cols-3 gap-3 text-xs mb-4">
              <div className="text-center bg-white bg-opacity-20 rounded-lg p-2">
                <Clock className="w-4 h-4 mx-auto mb-1" />
                <div className="font-semibold">ETA</div>
                <div>{alert.eta}</div>
              </div>
              <div className="text-center bg-white bg-opacity-20 rounded-lg p-2">
                <Target className="w-4 h-4 mx-auto mb-1" />
                <div className="font-semibold">Distance</div>
                <div>{alert.distance}</div>
              </div>
              <div className="text-center bg-white bg-opacity-20 rounded-lg p-2">
                <Users className="w-4 h-4 mx-auto mb-1" />
                <div className="font-semibold">Affected</div>
                <div>{alert.affectedPopulation}</div>
              </div>
            </div>

            <div className="flex space-x-2">
              <button 
                onClick={() => setCurrentScreen('alertDetails')}
                className="flex-1 bg-white text-gray-900 py-2 px-4 rounded-xl font-semibold hover:bg-opacity-90 transition-all"
              >
                View Details
              </button>
              <button className="bg-white bg-opacity-20 p-2 rounded-xl">
                <Share2 className="w-5 h-5" />
              </button>
            </div>
          </div>
        ))}
      </div>

      {/* Environmental Dashboard */}
      <div className="bg-white rounded-2xl shadow-lg p-5">
        <div className="flex items-center justify-between mb-4">
          <h3 className="font-bold text-lg flex items-center">
            <Activity className="w-5 h-5 mr-2 text-blue-600" />
            Real-time Coastal Data
          </h3>
          <button className="flex items-center space-x-1 text-blue-600 text-sm">
            <RefreshCw className="w-4 h-4" />
            <span>Live</span>
          </button>
        </div>

        <div className="grid grid-cols-2 gap-3">
          {Object.entries(environmentalData).map(([key, data]) => (
            <div key={key} className="bg-gradient-to-br from-gray-50 to-gray-100 rounded-xl p-3">
              <div className="flex items-center justify-between mb-2">
                <span className="text-xs font-semibold text-gray-600 uppercase tracking-wide">
                  {key.replace(/([A-Z])/g, ' $1').trim()}
                </span>
                <div className={`flex items-center text-xs ${
                  data.status === 'rising' || data.status === 'increasing' ? 'text-red-500' :
                  data.status === 'dropping' || data.status === 'declining' ? 'text-orange-500' :
                  'text-green-500'
                }`}>
                  <TrendingUp className="w-3 h-3 mr-1" />
                  {data.trend}
                </div>
              </div>
              <div className="flex items-end justify-between">
                <div>
                  <span className="text-xl font-bold">{data.value}</span>
                  <span className="text-sm text-gray-500 ml-1">{data.unit}</span>
                </div>
                <span className={`text-xs px-2 py-1 rounded-full ${
                  data.status === 'high' || data.status === 'rough' || data.status === 'unhealthy' ? 'bg-red-100 text-red-700' :
                  data.status === 'poor' || data.status === 'dropping' ? 'bg-orange-100 text-orange-700' :
                  'bg-green-100 text-green-700'
                }`}>
                  {data.status}
                </span>
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* Quick Actions */}
      <div className="grid grid-cols-2 gap-4">
        <button 
          onClick={() => setCurrentScreen('map')}
          className="bg-gradient-to-r from-blue-500 to-blue-600 text-white p-4 rounded-2xl shadow-lg hover:shadow-xl transition-all transform hover:scale-105"
        >
          <MapPin className="w-8 h-8 mx-auto mb-2" />
          <div className="font-semibold">Threat Map</div>
          <div className="text-xs opacity-80">Live tracking</div>
        </button>
        <button 
          onClick={() => setCurrentScreen('report')}
          className="bg-gradient-to-r from-green-500 to-green-600 text-white p-4 rounded-2xl shadow-lg hover:shadow-xl transition-all transform hover:scale-105"
        >
          <Camera className="w-8 h-8 mx-auto mb-2" />
          <div className="font-semibold">Quick Report</div>
          <div className="text-xs opacity-80">Earn 10 points</div>
        </button>
      </div>

      {/* AI Insights */}
      <div className="bg-gradient-to-r from-indigo-500 to-purple-600 text-white rounded-2xl p-5">
        <div className="flex items-center mb-3">
          <div className="bg-white bg-opacity-20 p-2 rounded-full mr-3">
            <Eye className="w-6 h-6" />
          </div>
          <div>
            <h4 className="font-bold">AI Coastal Insights</h4>
            <p className="text-xs opacity-90">Powered by Machine Learning</p>
          </div>
        </div>
        <p className="text-sm mb-3">
          Based on satellite imagery and sensor data, storm intensity has increased by 23% in the last 2 hours. 
          Recommend immediate evacuation for coastal areas within 5km.
        </p>
        <button className="bg-white bg-opacity-20 text-white px-4 py-2 rounded-xl text-sm font-semibold">
          View Full Analysis
        </button>
      </div>
    </div>
  );

  const MapScreen = () => (
    <div className="p-4 space-y-4">
      <div className="flex items-center justify-between">
        <h2 className="text-xl font-bold flex items-center">
          <MapPin className="w-6 h-6 mr-2 text-blue-600" />
          Advanced Threat Mapping
        </h2>
        <div className="flex space-x-2">
          <button className="bg-blue-600 text-white px-3 py-1 rounded-full text-sm">
            3D View
          </button>
          <button className="bg-gray-200 px-3 py-1 rounded-full text-sm">
            2D
          </button>
        </div>
      </div>
      
      {/* Enhanced Interactive Map */}
      <div className="relative bg-gradient-to-br from-blue-900 via-blue-700 to-cyan-500 rounded-2xl h-96 mb-4 overflow-hidden">
        <div className="absolute inset-0 p-4">
          <svg viewBox="0 0 350 320" className="w-full h-full">
            {/* Ocean background gradient */}
            <defs>
              <radialGradient id="oceanGrad" cx="50%" cy="50%">
                <stop offset="0%" stopColor="#0ea5e9" stopOpacity="0.3" />
                <stop offset="100%" stopColor="#0369a1" stopOpacity="0.7" />
              </radialGradient>
              <linearGradient id="landGrad" x1="0%" y1="0%" x2="100%" y2="100%">
                <stop offset="0%" stopColor="#22c55e" stopOpacity="0.4" />
                <stop offset="100%" stopColor="#15803d" stopOpacity="0.6" />
              </linearGradient>
            </defs>
            
            {/* Ocean area */}
            <rect width="350" height="200" fill="url(#oceanGrad)" />
            
            {/* Coastline */}
            <path d="M0 160 Q80 140 160 155 T280 160 Q320 170 350 165 L350 320 L0 320 Z" 
                  fill="url(#landGrad)" stroke="#059669" strokeWidth="2" />
            
            {/* Land areas and cities */}
            <circle cx="100" cy="200" r="8" fill="#16a34a" />
            <text x="100" y="220" textAnchor="middle" fontSize="8" fill="#fff">Kutch</text>
            
            <circle cx="200" cy="210" r="10" fill="#16a34a" />
            <text x="200" y="232" textAnchor="middle" fontSize="8" fill="#fff">Gandhinagar</text>
            
            <circle cx="280" cy="205" r="12" fill="#16a34a" />
            <text x="280" y="230" textAnchor="middle" fontSize="8" fill="#fff">Ahmedabad</text>
            
            {/* Vidhi's location (animated) */}
            <g className="animate-pulse">
              <circle cx="200" cy="180" r="8" fill="#3b82f6" stroke="#fff" strokeWidth="2" />
              <circle cx="200" cy="180" r="15" fill="#3b82f6" fillOpacity="0.3" className="animate-ping" />
              <text x="200" y="200" textAnchor="middle" fontSize="8" fill="#fff" fontWeight="bold">Vidhi</text>
            </g>
            
            {/* Cyclone visualization */}
            <g className="animate-spin" style={{transformOrigin: '150px 80px', animationDuration: '3s'}}>
              <circle cx="150" cy="80" r="25" fill="none" stroke="#ef4444" strokeWidth="3" strokeDasharray="5,5" />
              <circle cx="150" cy="80" r="15" fill="#dc2626" fillOpacity="0.6" />
              <text x="150" y="85" textAnchor="middle" fontSize="10" fill="#fff" fontWeight="bold">C3</text>
            </g>
            
            {/* Wind direction arrows */}
            <defs>
              <marker id="arrowhead" markerWidth="10" markerHeight="7" refX="9" refY="3.5" orient="auto">
                <polygon points="0 0, 10 3.5, 0 7" fill="#fbbf24" />
              </marker>
            </defs>
            <path d="M80 100 L120 130" stroke="#fbbf24" strokeWidth="3" markerEnd="url(#arrowhead)" />
            <path d="M180 90 L210 140" stroke="#fbbf24" strokeWidth="3" markerEnd="url(#arrowhead)" />
            
            {/* Evacuation routes */}
            <path d="M200 180 Q150 220 80 240" stroke="#22c55e" strokeWidth="4" strokeDasharray="8,4" />
            <path d="M200 180 Q240 200 300 220" stroke="#22c55e" strokeWidth="4" strokeDasharray="8,4" />
            
            {/* Threat zones (concentric circles) */}
            <circle cx="150" cy="80" r="60" fill="none" stroke="#dc2626" strokeWidth="2" strokeOpacity="0.4" strokeDasharray="3,3" />
            <circle cx="150" cy="80" r="90" fill="none" stroke="#f97316" strokeWidth="2" strokeOpacity="0.3" strokeDasharray="3,3" />
            <circle cx="150" cy="80" r="120" fill="none" stroke="#eab308" strokeWidth="2" strokeOpacity="0.2" strokeDasharray="3,3" />
          </svg>
        </div>
        
        {/* Enhanced Map Legend */}
        <div className="absolute bottom-4 left-4 bg-white bg-opacity-95 backdrop-blur-sm rounded-xl p-3 text-xs space-y-2">
          <div className="font-semibold text-gray-800 mb-2">Live Threat Map</div>
          <div className="flex items-center">
            <div className="w-3 h-3 bg-blue-500 rounded-full mr-2 animate-pulse"></div>
            <span>Your Location (GPS)</span>
          </div>
          <div className="flex items-center">
            <div className="w-3 h-3 bg-red-500 rounded-full mr-2"></div>
            <span>Category 3 Cyclone</span>
          </div>
          <div className="flex items-center">
            <div className="w-3 h-1 bg-green-500 mr-2"></div>
            <span>Safe Evacuation Route</span>
          </div>
          <div className="flex items-center">
            <div className="w-3 h-1 bg-yellow-500 mr-2"></div>
            <span>Wind Direction</span>
          </div>
        </div>

        {/* Live data overlay */}
        <div className="absolute top-4 right-4 bg-black bg-opacity-50 backdrop-blur-sm text-white rounded-xl p-3 text-xs">
          <div className="flex items-center mb-2">
            <Radio className="w-4 h-4 mr-2 text-green-400" />
            <span>LIVE TRACKING</span>
          </div>
          <div>Wind: {environmentalData.windSpeed.value.toFixed(0)} km/h</div>
          <div>Pressure: {environmentalData.pressure.value} hPa</div>
          <div>Updated: {new Date().toLocaleTimeString()}</div>
        </div>
      </div>

      {/* Map Controls */}
      <div className="grid grid-cols-4 gap-3">
        <button className="bg-red-500 text-white p-3 rounded-xl text-center shadow-lg">
          <AlertTriangle className="w-5 h-5 mx-auto mb-1" />
          <div className="text-xs">Threats</div>
        </button>
        <button className="bg-green-500 text-white p-3 rounded-xl text-center shadow-lg">
          <Shield className="w-5 h-5 mx-auto mb-1" />
          <div className="text-xs">Safe Zones</div>
        </button>
        <button className="bg-blue-500 text-white p-3 rounded-xl text-center shadow-lg">
          <Navigation className="w-5 h-5 mx-auto mb-1" />
          <div className="text-xs">Routes</div>
        </button>
        <button className="bg-purple-500 text-white p-3 rounded-xl text-center shadow-lg">
          <Satellite className="w-5 h-5 mx-auto mb-1" />
          <div className="text-xs">Satellite</div>
        </button>
      </div>

      {/* Smart Evacuation Recommendations */}
      <div className="bg-gradient-to-r from-green-500 to-emerald-600 text-white rounded-2xl p-5">
        <h4 className="font-bold text-lg mb-3 flex items-center">
          <Zap className="w-5 h-5 mr-2" />
          AI-Powered Evacuation Routes
        </h4>
        <div className="space-y-3">
          <div className="bg-white bg-opacity-20 rounded-xl p-3">
            <div className="flex items-center justify-between mb-2">
              <span className="font-semibold">Route Alpha (Recommended)</span>
              <span className="bg-yellow-400 text-black px-2 py-1 rounded-full text-xs font-bold">FASTEST</span>
            </div>
            <div className="text-sm opacity-90 mb-2">
              NH-8 → Ahmedabad via Sanand • 42 km • Est. 38 min
            </div>
            <div className="flex justify-between text-xs">
              <span>Traffic: Light</span>
              <span>Road Condition: Good</span>
              <span>Safety Score: 9.2/10</span>
            </div>
          </div>
          
          <div className="bg-white bg-opacity-15 rounded-xl p-3">
            <div className="flex items-center justify-between mb-2">
              <span className="font-semibold">Route Beta</span>
              <span className="bg-blue-400 text-white px-2 py-1 rounded-full text-xs">ALTERNATE</span>
            </div>
            <div className="text-sm opacity-90 mb-2">
              SH-6 → Gandhinagar via Kalol • 35 km • Est. 45 min
            </div>
            <div className="flex justify-between text-xs">
              <span>Traffic: Moderate</span>
              <span>Road Condition: Fair</span>
              <span>Safety Score: 8.1/10</span>
            </div>
          </div>
        </div>
      </div>
    </div>
  );

  const ReportScreen = () => {
    const [reportType, setReportType] = useState('');
    const [description, setDescription] = useState('');
    const [severity, setSeverity] = useState('medium');
    const [attachments, setAttachments] = useState([]);
    const [isSubmitting, setIsSubmitting] = useState(false);

    const reportTypes = [
      { 
        id: 'erosion', 
        label: 'Coastal Erosion', 
        icon: Waves, 
        color: 'blue',
        points: 15,
        description: 'Report unusual coastal erosion patterns'
      },
      { 
        id: 'pollution', 
        label: 'Marine Pollution', 
        icon: AlertTriangle, 
        color: 'red',
        points: 20,
        description: 'Oil spills, chemical discharge, debris'
      },
      { 
        id: 'weather', 
        label: 'Extreme Weather', 
        icon: Wind, 
        color: 'purple',
        points: 25,
        description: 'Unusual wind, waves, or atmospheric conditions'
      },
      { 
        id: 'wildlife', 
        label: 'Marine Life Alert', 
        icon: Heart, 
        color: 'green',
        points: 10,
        description: 'Stranded animals, unusual behavior'
      },
      { 
        id: 'infrastructure', 
        label: 'Infrastructure Damage', 
        icon: Shield, 
        color: 'orange',
        points: 15,
        description: 'Damaged sea walls, ports, or coastal structures'
      },
      { 
        id: 'tsunami', 
        label: 'Tsunami Signs', 
        icon: Waves, 
        color: 'red',
        points: 50,
        description: 'Unusual water recession or wave patterns'
      }
    ];

    const handleSubmit = async () => {
      if (reportType && description) {
        setIsSubmitting(true);
        
        // Simulate API call
        setTimeout(() => {
          const selectedType = reportTypes.find(t => t.id === reportType);
          setUser(prev => ({ ...prev, points: prev.points + selectedType.points }));
          setGamification(prev => ({ 
            ...prev, 
            todayReports: prev.todayReports + 1,
            streak: prev.streak + 1
          }));
          
          alert(`Report submitted successfully! You earned ${selectedType.points} points. Thank you for protecting our coast, ${user.name}!`);
          setReportType('');
          setDescription('');
          setAttachments([]);
          setIsSubmitting(false);
          setSeverity('medium');
        }, 2000);
      }
    };

    return (
      <div className="p-4 space-y-4">
        <div className="flex items-center justify-between">
          <h2 className="text-xl font-bold flex items-center">
            <Camera className="w-6 h-6 mr-2 text-green-600" />
            Report Coastal Issue
          </h2>
          <div className="bg-green-100 text-green-700 px-3 py-1 rounded-full text-sm font-semibold">
            +{reportTypes.find(t => t.id === reportType)?.points || 0} Points
          </div>
        </div>

        {/* Report Type Selection */}
        <div>
          <label className="block text-sm font-semibold mb-3">What are you reporting?</label>
          <div className="grid grid-cols-2 gap-3">
            {reportTypes.map(type => {
              const IconComponent = type.icon;
              return (
                <button
                  key={type.id}
                  onClick={() => setReportType(type.id)}
                  className={`p-4 rounded-2xl border-2 text-left transition-all transform hover:scale-105 ${
                    reportType === type.id 
                      ? `border-${type.color}-500 bg-gradient-to-br from-${type.color}-50 to-${type.color}-100 shadow-lg` 
                      : 'border-gray-200 bg-white hover:border-gray-300'
                  }`}
                >
                  <div className="flex items-center justify-between mb-2">
                    <IconComponent className={`w-6 h-6 text-${type.color}-600`} />
                    <span className="text-xs font-bold text-green-600">+{type.points}</span>
                  </div>
                  <div className="text-sm font-semibold mb-1">{type.label}</div>
                  <div className="text-xs text-gray-600">{type.description}</div>
                </button>
              );
            })}
          </div>
        </div>

        {/* Severity Level */}
        {reportType && (
          <div className="bg-white rounded-2xl shadow p-4">
            <label className="block text-sm font-semibold mb-3">Severity Level</label>
            <div className="flex space-x-2">
              {['low', 'medium', 'high', 'critical'].map(level => (
                <button
                  key={level}
                  onClick={() => setSeverity(level)}
                  className={`flex-1 py-2 px-3 rounded-xl text-sm font-semibold transition-all ${
                    severity === level 
                      ? level === 'critical' ? 'bg-red-500 text-white' :
                        level === 'high' ? 'bg-orange-500 text-white' :
                        level === 'medium' ? 'bg-yellow-500 text-black' :
                        'bg-green-500 text-white'
                      : 'bg-gray-200 text-gray-700'
                  }`}
                >
                  {level.charAt(0).toUpperCase() + level.slice(1)}
                </button>
              ))}
            </div>
          </div>
        )}

        {/* Enhanced Description */}
        <div className="bg-white rounded-2xl shadow p-4">
          <label className="block text-sm font-semibold mb-2">Detailed Description</label>
          <textarea
            value={description}
            onChange={(e) => setDescription(e.target.value)}
            placeholder="Describe what you observed in detail. Include time, weather conditions, and any other relevant information..."
            className="w-full p-4 border border-gray-200 rounded-xl resize-none h-32 focus:border-blue-500 focus:outline-none transition-colors"
          />
          <div className="mt-2 text-xs text-gray-500 flex items-center justify-between">
            <span>{description.length}/500 characters</span>
            <span>Detailed reports earn bonus points!</span>
          </div>
        </div>

        {/* Enhanced Location Info */}
        <div className="bg-gradient-to-r from-blue-500 to-blue-600 text-white rounded-2xl p-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center">
              <MapPin className="w-5 h-5 mr-2" />
              <div>
                <div className="font-semibold">Current Location</div>
                <div className="text-xs opacity-90">
                  {userLocation.lat.toFixed(4)}, {userLocation.lng.toFixed(4)}
                </div>
              </div>
            </div>
            <div className="text-right">
              <div className={`text-xs px-2 py-1 rounded-full ${
                userLocation.accuracy === 'High' ? 'bg-green-500' : 'bg-orange-500'
              }`}>
                {userLocation.accuracy} Accuracy
              </div>
              <div className="text-xs opacity-80 mt-1">
                {userLocation.lastUpdate.toLocaleTimeString()}
              </div>
            </div>
          </div>
        </div>

        {/* Enhanced Evidence Collection */}
        <div className="bg-white rounded-2xl shadow p-4">
          <label className="block text-sm font-semibold mb-3">Add Evidence (Bonus Points!)</label>
          <div className="grid grid-cols-2 gap-3 mb-3">
            <button className="flex flex-col items-center justify-center p-4 border-2 border-dashed border-gray-300 rounded-xl hover:border-blue-400 transition-all transform hover:scale-105">
              <Camera className="w-8 h-8 mb-2 text-blue-500" />
              <span className="text-sm font-semibold">Take Photo</span>
              <span className="text-xs text-green-600">+5 points</span>
            </button>
            <button className="flex flex-col items-center justify-center p-4 border-2 border-dashed border-gray-300 rounded-xl hover:border-blue-400 transition-all transform hover:scale-105">
              <Mic className="w-8 h-8 mb-2 text-red-500" />
              <span className="text-sm font-semibold">Voice Note</span>
              <span className="text-xs text-green-600">+3 points</span>
            </button>
          </div>
          
          <div className="grid grid-cols-1 gap-3">
            <button className="flex items-center justify-center p-3 border-2 border-dashed border-purple-300 rounded-xl hover:border-purple-400 transition-all">
              <Upload className="w-5 h-5 mr-2 text-purple-500" />
              <span className="text-sm font-semibold">Upload Files</span>
              <span className="text-xs text-green-600 ml-2">+2 points</span>
            </button>
          </div>
        </div>

        {/* AI-Powered Suggestions */}
        {reportType && (
          <div className="bg-gradient-to-r from-purple-500 to-indigo-600 text-white rounded-2xl p-4">
            <div className="flex items-center mb-3">
              <Eye className="w-5 h-5 mr-2" />
              <span className="font-semibold">AI Suggestions</span>
            </div>
            <div className="text-sm space-y-2">
              <p>• Consider including wind speed measurements</p>
              <p>• Photo from multiple angles increases accuracy</p>
              <p>• Note any changes from previous observations</p>
            </div>
          </div>
        )}

        {/* Submit Button */}
        <button
          onClick={handleSubmit}
          disabled={!reportType || !description || isSubmitting}
          className="w-full bg-gradient-to-r from-green-500 to-emerald-600 text-white py-4 rounded-2xl font-bold flex items-center justify-center disabled:from-gray-400 disabled:to-gray-500 disabled:cursor-not-allowed hover:from-green-600 hover:to-emerald-700 transition-all shadow-lg transform hover:scale-105 disabled:transform-none"
        >
          {isSubmitting ? (
            <>
              <RefreshCw className="w-5 h-5 mr-2 animate-spin" />
              Submitting...
            </>
          ) : (
            <>
              <Send className="w-5 h-5 mr-2" />
              Submit Report & Earn Points
            </>
          )}
        </button>

        {/* Community Impact */}
        <div className="bg-blue-50 rounded-2xl p-4">
          <h4 className="font-semibold text-blue-800 mb-2">Community Impact</h4>
          <div className="grid grid-cols-3 gap-4 text-center">
            <div>
              <div className="text-2xl font-bold text-blue-600">1,247</div>
              <div className="text-xs text-gray-600">Reports Today</div>
            </div>
            <div>
              <div className="text-2xl font-bold text-green-600">94%</div>
              <div className="text-xs text-gray-600">Verified</div>
            </div>
            <div>
              <div className="text-2xl font-bold text-purple-600">2.3M</div>
              <div className="text-xs text-gray-600">People Helped</div>
            </div>
          </div>
        </div>
      </div>
    );
  };

  const SettingsScreen = () => (
    <div className="p-4 space-y-4">
      <h2 className="text-xl font-bold flex items-center">
        <Settings className="w-6 h-6 mr-2 text-gray-600" />
        Settings & Preferences
      </h2>

      {/* User Profile */}
      <div className="bg-gradient-to-r from-blue-500 to-purple-600 text-white rounded-2xl p-5">
        <div className="flex items-center space-x-4">
          <div className="w-16 h-16 bg-white bg-opacity-20 rounded-full flex items-center justify-center">
            <User className="w-8 h-8" />
          </div>
          <div>
            <h3 className="text-xl font-bold">{user.name}</h3>
            <p className="opacity-90">{user.level}</p>
            <div className="flex items-center space-x-4 text-sm mt-2">
              <span>{user.points} Points</span>
              <span>Level 7</span>
              <span>{gamification.badges.length} Badges</span>
            </div>
          </div>
        </div>
      </div>

      {/* Notification Settings */}
      <div className="bg-white rounded-2xl shadow p-5">
        <h3 className="font-semibold mb-4 flex items-center">
          <Bell className="w-5 h-5 mr-2 text-blue-600" />
          Smart Notifications
        </h3>
        <div className="space-y-4">
          {[
            { id: 'push', label: 'Push Notifications', desc: 'Instant alerts for threats', enabled: true },
            { id: 'sms', label: 'SMS Emergency Alerts', desc: 'Critical alerts via SMS', enabled: true },
            { id: 'ai', label: 'AI Predictions', desc: 'ML-powered early warnings', enabled: true },
            { id: 'community', label: 'Community Reports', desc: 'Updates from other users', enabled: false },
            { id: 'gamification', label: 'Achievement Notifications', desc: 'Points, badges, and levels', enabled: true }
          ].map(setting => (
            <div key={setting.id} className="flex items-center justify-between p-3 bg-gray-50 rounded-xl">
              <div>
                <div className="font-semibold">{setting.label}</div>
                <div className="text-xs text-gray-600">{setting.desc}</div>
              </div>
              <button
                className={`w-12 h-6 rounded-full ${setting.enabled ? 'bg-blue-600' : 'bg-gray-300'} relative transition-colors`}
              >
                <div className={`w-5 h-5 bg-white rounded-full absolute top-0.5 transition-transform ${setting.enabled ? 'translate-x-6' : 'translate-x-0.5'}`}></div>
              </button>
            </div>
          ))}
        </div>
      </div>

      {/* Language & Region */}
      <div className="bg-white rounded-2xl shadow p-5">
        <h3 className="font-semibold mb-4 flex items-center">
          <Globe className="w-5 h-5 mr-2 text-blue-600" />
          Language & Region
        </h3>
        <div className="space-y-2">
          {[
            { code: 'en', name: 'English', flag: '🇺🇸' },
            { code: 'hi', name: 'हिंदी (Hindi)', flag: '🇮🇳' },
            { code: 'gu', name: 'ગુજરાતી (Gujarati)', flag: '🇮🇳' }
          ].map(lang => (
            <button
              key={lang.code}
              className="w-full text-left p-4 rounded-xl border border-gray-200 hover:border-blue-300 transition-all flex items-center justify-between"
            >
              <div className="flex items-center">
                <span className="text-2xl mr-3">{lang.flag}</span>
                <span className="font-semibold">{lang.name}</span>
              </div>
              <Check className="w-5 h-5 text-blue-600" />
            </button>
          ))}
        </div>
      </div>

      {/* Emergency Contacts */}
      <div className="bg-white rounded-2xl shadow p-5">
        <h3 className="font-semibold mb-4 flex items-center">
          <Phone className="w-5 h-5 mr-2 text-red-600" />
          Emergency Hotlines
        </h3>
        <div className="space-y-3">
          {[
            { name: 'National Disaster Response', number: '108', color: 'red', icon: AlertTriangle },
            { name: 'Coast Guard Rescue', number: '1554', color: 'blue', icon: Anchor },
            { name: 'Police Emergency', number: '100', color: 'green', icon: Shield },
            { name: 'Fire Services', number: '101', color: 'orange', icon: Zap }
          ].map(contact => {
            const IconComponent = contact.icon;
            return (
              <div key={contact.number} className={`flex items-center justify-between p-4 bg-${contact.color}-50 rounded-xl`}>
                <div className="flex items-center">
                  <div className={`bg-${contact.color}-500 text-white p-2 rounded-full mr-3`}>
                    <IconComponent className="w-5 h-5" />
                  </div>
                  <div>
                    <div className="font-semibold">{contact.name}</div>
                    <div className="text-sm text-gray-600">24/7 Emergency Service</div>
                  </div>
                </div>
                <button className={`bg-${contact.color}-600 text-white px-4 py-2 rounded-xl text-sm font-bold hover:bg-${contact.color}-700 transition-colors`}>
                  Call {contact.number}
                </button>
              </div>
            );
          })}
        </div>
      </div>

      {/* Data & Privacy */}
      <div className="bg-white rounded-2xl shadow p-5">
        <h3 className="font-semibold mb-4">Data & Privacy</h3>
        <div className="space-y-3 text-sm">
          <div className="flex items-center justify-between">
            <span>Location Services</span>
            <span className="text-green-600 font-semibold">Enabled</span>
          </div>
          <div className="flex items-center justify-between">
            <span>Data Usage</span>
            <span className="text-blue-600">2.3 MB today</span>
          </div>
          <div className="flex items-center justify-between">
            <span>Offline Mode Available</span>
            <span className="text-green-600">Yes</span>
          </div>
        </div>
      </div>
    </div>
  );

  const AlertDetailsScreen = () => {
    const alert = alerts[0]; // Show first alert details
    
    return (
      <div className="p-4 space-y-4">
        <div className="flex items-center justify-between">
          <h2 className="text-xl font-bold flex items-center">
            <AlertTriangle className="w-6 h-6 mr-2 text-red-600" />
            Critical Alert Details
          </h2>
          <button 
            onClick={() => setCurrentScreen('dashboard')}
            className="bg-gray-200 p-2 rounded-full"
          >
            <X className="w-5 h-5" />
          </button>
        </div>

        {/* Alert Header */}
        <div className={`bg-gradient-to-r ${getSeverityColor(alert.severity)} text-white rounded-2xl p-6`}>
          <div className="flex items-center justify-between mb-4">
            <div className="flex items-center">
              {getAlertIcon(alert.type)}
              <div className="ml-3">
                <h3 className="text-xl font-bold">{alert.title}</h3>
                <p className="text-sm opacity-90">{alert.source} • {alert.timestamp.toLocaleTimeString()}</p>
              </div>
            </div>
            <div className="text-center">
              <div className="text-3xl font-bold">{alert.confidence}%</div>
              <div className="text-xs opacity-80">AI Confidence</div>
            </div>
          </div>
          <p className="text-lg">{alert.description}</p>
        </div>

        {/* Detailed Metrics */}
        <div className="grid grid-cols-2 gap-4">
          <div className="bg-white rounded-2xl shadow p-4">
            <h4 className="font-semibold mb-3 text-center">Impact Assessment</h4>
            <div className="space-y-3 text-center">
              <div>
                <div className="text-2xl font-bold text-red-600">{alert.affectedPopulation}</div>
                <div className="text-xs text-gray-600">People at Risk</div>
              </div>
              <div>
                <div className="text-2xl font-bold text-orange-600">{alert.evacuationZones.length}</div>
                <div className="text-xs text-gray-600">Evacuation Zones</div>
              </div>
            </div>
          </div>

          <div className="bg-white rounded-2xl shadow p-4">
            <h4 className="font-semibold mb-3 text-center">Timeline</h4>
            <div className="space-y-3 text-center">
              <div>
                <div className="text-2xl font-bold text-blue-600">{alert.eta}</div>
                <div className="text-xs text-gray-600">Estimated Arrival</div>
              </div>
              <div>
                <div className="text-2xl font-bold text-purple-600">{alert.distance}</div>
                <div className="text-xs text-gray-600">Current Distance</div>
              </div>
            </div>
          </div>
        </div>

        {/* Evacuation Zones */}
        <div className="bg-white rounded-2xl shadow p-5">
          <h4 className="font-semibold mb-4 flex items-center">
            <Target className="w-5 h-5 mr-2 text-orange-600" />
            Evacuation Zones
          </h4>
          <div className="space-y-3">
            {alert.evacuationZones.map((zone, index) => (
              <div key={index} className={`p-3 rounded-xl border-l-4 ${
                index === 0 ? 'border-red-500 bg-red-50' :
                index === 1 ? 'border-orange-500 bg-orange-50' :
                'border-yellow-500 bg-yellow-50'
              }`}>
                <div className="flex items-center justify-between">
                  <div>
                    <div className="font-semibold">{zone}</div>
                    <div className="text-sm text-gray-600">
                      {index === 0 ? 'Immediate evacuation required' :
                       index === 1 ? 'Prepare for evacuation' :
                       'Monitor situation closely'}
                    </div>
                  </div>
                  <div className={`px-3 py-1 rounded-full text-xs font-bold ${
                    index === 0 ? 'bg-red-500 text-white' :
                    index === 1 ? 'bg-orange-500 text-white' :
                    'bg-yellow-500 text-black'
                  }`}>
                    {index === 0 ? 'URGENT' : index === 1 ? 'PREPARE' : 'WATCH'}
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>

        {/* Emergency Action Center */}
        <div className="bg-gradient-to-r from-red-500 to-red-600 text-white rounded-2xl p-5">
          <h4 className="font-semibold mb-4 text-center text-lg">🚨 Emergency Action Center</h4>
          <div className="grid grid-cols-2 gap-3">
            <button className="bg-white bg-opacity-20 text-white p-4 rounded-xl text-center hover:bg-opacity-30 transition-all">
              <Phone className="w-6 h-6 mx-auto mb-2" />
              <div className="font-semibold">Call 108</div>
              <div className="text-xs opacity-80">Disaster Response</div>
            </button>
            <button className="bg-white bg-opacity-20 text-white p-4 rounded-xl text-center hover:bg-opacity-30 transition-all">
              <Users className="w-6 h-6 mx-auto mb-2" />
              <div className="font-semibold">Alert Family</div>
              <div className="text-xs opacity-80">Mass Notification</div>
            </button>
            <button className="bg-white bg-opacity-20 text-white p-4 rounded-xl text-center hover:bg-opacity-30 transition-all">
              <Navigation className="w-6 h-6 mx-auto mb-2" />
              <div className="font-semibold">Start Navigation</div>
              <div className="text-xs opacity-80">To Safety</div>
            </button>
            <button className="bg-white bg-opacity-20 text-white p-4 rounded-xl text-center hover:bg-opacity-30 transition-all">
              <Share2 className="w-6 h-6 mx-auto mb-2" />
              <div className="font-semibold">Share Alert</div>
              <div className="text-xs opacity-80">Social Media</div>
            </button>
          </div>
        </div>
      </div>
    );
  };

  // Enhanced Bottom Navigation
  const BottomNavigation = () => {
    const navItems = [
      { id: 'dashboard', label: 'Dashboard', icon: Home, badge: alerts.length },
      { id: 'map', label: 'Map', icon: MapPin },
      { id: 'report', label: 'Report', icon: Plus, highlight: true },
      { id: 'settings', label: 'Profile', icon: User }
    ];

    return (
      <div className="fixed bottom-0 left-0 right-0 bg-white bg-opacity-95 backdrop-blur-sm border-t border-gray-200 px-4 py-3">
        <div className="flex justify-around max-w-md mx-auto">
          {navItems.map(item => {
            const IconComponent = item.icon;
            return (
              <button
                key={item.id}
                onClick={() => setCurrentScreen(item.id)}
                className={`relative flex flex-col items-center p-2 rounded-xl transition-all ${
                  currentScreen === item.id 
                    ? 'text-blue-600 bg-blue-50 scale-110' 
                    : 'text-gray-600 hover:text-blue-600'
                } ${item.highlight ? 'bg-green-500 text-white hover:text-white scale-110' : ''}`}
              >
                <IconComponent className="w-6 h-6 mb-1" />
                <span className="text-xs font-semibold">{item.label}</span>
                {item.badge && item.badge > 0 && (
                  <span className="absolute -top-1 -right-1 bg-red-500 text-white text-xs rounded-full w-5 h-5 flex items-center justify-center animate-pulse">
                    {item.badge}
                  </span>
                )}
              </button>
            );
          })}
        </div>
      </div>
    );
  };

  const renderScreen = () => {
    switch (currentScreen) {
      case 'dashboard': return <DashboardScreen />;
      case 'map': return <MapScreen />;
      case 'report': return <ReportScreen />;
      case 'settings': return <SettingsScreen />;
      case 'alertDetails': return <AlertDetailsScreen />;
      default: return <DashboardScreen />;
    }
  };

  return (
    <div className="max-w-md mx-auto bg-gradient-to-br from-gray-50 to-blue-50 min-h-screen pb-24">
      {/* Enhanced Header */}
      <div className="bg-gradient-to-r from-blue-600 via-blue-700 to-cyan-600 text-white">
        <StatusBar />
        <div className="p-4">
          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-xl font-bold flex items-center">
                <Anchor className="w-6 h-6 mr-2" />
                Coastal Sentinel
              </h1>
              <p className="text-sm opacity-90">Protecting Gujarat's Coast with AI</p>
            </div>
            <div className="flex items-center space-x-2">
              <div className="relative">
                <Bell className={`w-6 h-6 ${alerts.length > 0 ? 'animate-bounce' : ''}`} />
                {alerts.length > 0 && (
                  <span className="absolute -top-2 -right-2 bg-red-500 text-white text-xs rounded-full w-5 h-5 flex items-center justify-center animate-pulse">
                    {alerts.length}
                  </span>
                )}
              </div>
              <div className={`w-3 h-3 rounded-full ${isOnline ? 'bg-green-400' : 'bg-red-400'} animate-pulse`}></div>
            </div>
          </div>
        </div>
      </div>

      {/* Screen Content */}
      <div className="flex-1">
        {renderScreen()}
      </div>

      {/* Bottom Navigation */}
      <BottomNavigation />
    </div>
  );
};

export default CoastalSentinelApp;
